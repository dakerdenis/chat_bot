<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>DAKER One ‚Äî —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body class="bg-light">

    <div class="container py-5">
        <h1 class="mb-4">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <strong>DAKER One</strong> ‚Äî —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</h1>

        <p class="lead">–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.</p>

        <div class="mb-4">
            <h3>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
            <ul>
                <li><a href="{{ route('client.login') }}">–í–æ–π—Ç–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç</a></li>
            </ul>
        </div>

        <hr class="my-5">

        <div class="card shadow">
            <div class="card-header bg-success text-white">
                ü§ñ –û–±—â–µ–Ω–∏–µ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
            </div>
            <div class="card-body">
                <div id="chat-box" class="border rounded p-3 mb-3"
                    style="height: 250px; overflow-y: auto; background: #f8f9fa;">
                    <div class="text-muted">AI –∂–¥—ë—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...</div>
                </div>

                <form id="chat-form">
                    <div class="input-group">
                        <input type="text" id="user-input" class="form-control" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                            required>
                        <button class="btn btn-success" type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        const form = document.getElementById('chat-form');
        const input = document.getElementById('user-input');
        const chatBox = document.getElementById('chat-box');
    
        form.addEventListener('submit', async function(e) {
            e.preventDefault(); // ‚õî –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const text = input.value.trim();
            if (!text) return;
    
            // üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMsg = document.createElement('div');
            userMsg.classList.add('text-end', 'mb-2');
            userMsg.innerHTML = `<span class="badge bg-primary">${text}</span>`;
            chatBox.appendChild(userMsg);
    
            input.value = ''; // –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
    
            // ü§ñ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            const botMsg = document.createElement('div');
            botMsg.classList.add('text-start', 'text-muted', 'mb-2');
            botMsg.textContent = 'ü§ñ AI –ø–µ—á–∞—Ç–∞–µ—Ç...';
            chatBox.appendChild(botMsg);
            chatBox.scrollTop = chatBox.scrollHeight;
    
            // ‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            try {
                const response = await fetch('/api/public-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                    body: JSON.stringify({ message: text })
                });
    
                const data = await response.json();
                botMsg.textContent = data.answer ?? '[–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI]';
            } catch (error) {
                botMsg.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI.';
            }
        });
    </script>
    

</body>

</html>
