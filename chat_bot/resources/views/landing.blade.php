<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>DAKER One ‚Äî —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body class="bg-light">

    <div class="container py-5">
        <h1 class="mb-4">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <strong>DAKER One</strong> ‚Äî —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</h1>

        <p class="lead">–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.</p>

        <div class="mb-4">
            <h3>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
            <ul>
                <li><a href="{{ route('client.login') }}">–í–æ–π—Ç–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç</a></li>
            </ul>
        </div>

        <hr class="my-5">

        <div class="card shadow">
            <div class="card-header bg-success text-white">
                ü§ñ –û–±—â–µ–Ω–∏–µ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
            </div>
            <div class="card-body">
                <div id="chat-box" class="border rounded p-3 mb-3"
                    style="height: 250px; overflow-y: auto; background: #f8f9fa;">
                    <div class="text-muted">AI –∂–¥—ë—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...</div>
                </div>

                <form id="chat-form">
                    <div class="input-group">
                        <input type="text" id="user-input" class="form-control" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                            required>
                        <button class="btn btn-success" type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        const form = document.getElementById('chat-form');
        const input = document.getElementById('user-input');
        const chatBox = document.getElementById('chat-box');

        let history = [];

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const text = input.value.trim();

            // üö® –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ (–Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
            if (text.length === 0 || text.length > 300) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }

            // üö® –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–Ω–µ –±–æ–ª–µ–µ 3)
            const sentences = text.split(/[.!?]/).filter(s => s.trim().length > 0);
            if (sentences.length > 3) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMsg = document.createElement('div');
            userMsg.classList.add('text-end', 'mb-2');
            userMsg.innerHTML = `<span class="badge bg-primary">${text}</span>`;
            chatBox.appendChild(userMsg);
            input.value = '';

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            const botMsg = document.createElement('div');
            botMsg.classList.add('text-start', 'text-muted', 'mb-2');
            botMsg.textContent = 'ü§ñ AI –ø–µ—á–∞—Ç–∞–µ—Ç...';
            chatBox.appendChild(botMsg);
            chatBox.scrollTop = chatBox.scrollHeight;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history.push({
                role: 'user',
                content: text
            });
            if (history.length > 6) history.shift();

            try {
                const response = await fetch('/api/public-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                    body: JSON.stringify({
                        history: history
                    })
                });

                const data = await response.json();
                botMsg.textContent = data.answer ?? '[–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI]';

                if (data.answer) {
                    history.push({
                        role: 'assistant',
                        content: data.answer
                    });
                    if (history.length > 6) history.shift();
                }
            } catch (error) {
                botMsg.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI.';
            }
        });


        // üïí –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è

        let inactivityTimer;

        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                location.reload(); // üîÑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç = 900000 –º—Å
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ª—é–±–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ['click', 'mousemove', 'keydown', 'scroll', 'touchstart'].forEach(event => {
            document.addEventListener(event, resetInactivityTimer, false);
        });

        resetInactivityTimer(); // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    </script>


</body>

</html>
